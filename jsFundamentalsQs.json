[
  {
    "question": "What is one difference between collections created with Map and collections created with Object?",
    "category": "HTML",
    "answers": [
      {
        "answer": "You can count the records in a Map with a single method call.",
        "value": true
      },
      {
        "answer": "Keys in Maps can be strings.",
        "value": false
      },
      {
        "answer": "You can access values in a Map without iterating over the whole collection.",
        "value": false
      },
      {
        "answer": "You can iterate over values in a Map in their insertion order.",
        "value": false
      }
    ]
  },
  {
    "question": "Which statement is true about the 'async' attribute for the HTML script tag?",
    "category": "HTML",
    "answers": [
      {
        "answer": "It can be used only for external JavaScript code.",
        "value": false
      },
      {
        "answer": "It can be used only for internal JavaScript code.",
        "value": false
      },
      {
        "answer": "It can be used only for internal or external JavaScript code that exports a promise.",
        "value": true
      },
      {
        "answer": " It can be used for both internal and external JavaScript code.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is not a unary operator?",
    "category": "HTML",
    "answers": [
      {
        "answer": "typeof",
        "value": true
      },
      {
        "answer": "delete",
        "value": false
      },
      {
        "answer": "instanceof",
        "value": false
      },
      {
        "answer": "void",
        "value": false
      }
    ]
  },
  {
    "question": "Why might you choose to make your code asynchronous?",
    "category": "HTML",
    "answers": [
      {
        "answer": "to ensure that tasks further down in your code are not initiated until earlier tasks have completed",
        "value": false
      },
      {
        "answer": "to start tasks that might take some time without blocking subsequent tasks from executing immediately",
        "value": false
      },
      {
        "answer": "To make your code faster.",
        "value": true
      },
      {
        "answer": "to ensure that the call stack maintains a LIFO (Last in, First Out) structure.",
        "value": false
      }
    ]
  },
  {
    "question": "Which statement is used to skip just one iteration of the loop?",
    "category": "HTML",
    "answers": [
      {
        "answer": "continue",
        "value": true
      },
      {
        "answer": "jump around",
        "value": false
      },
      { "answer": "jump up, jump up, get down", "value": false },
      {
        "answer": "break",
        "value": false
      }
    ]
  },
  {
    "question": "Which statement is used to completely exit the loop?",
    "category": "HTML",
    "answers": [
      {
        "answer": "break",
        "value": true
      },
      {
        "answer": "continue",
        "value": false
      },
      {
        "answer": "Word to your moms, I came to drop bombs",
        "value": false
      },
      {
        "answer": "I got more rhymes than the Bible's got Psalms",
        "value": false
      }
    ]
  },
  {
    "question": "Explain 'this' in JavaScript?",
    "category": "HTML",
    "answers": [
      {
        "answer": "All of these are true.",
        "value": true
      },
      {
        "answer": "In an event, “this” refers to the element that received the event.",
        "value": false
      },
      {
        "answer": "Methods like call(), and apply() can refer this to any object.",
        "value": false
      },
      {
        "answer": "Alone, “this” refers to the global object.",
        "value": false
      },
      {
        "answer": "In a method, “this” refers to the owner object.",
        "value": false
      }
    ]
  },
  {
    "question": "What type of data structure is the DOM?",
    "category": "HTML",
    "answers": [
      {
        "answer": "The DOM is a tree, where each node is an object representing a part of the document.",
        "value": true
      },
      {
        "answer": "The DOM is a linked list, where each node is an object representing a part of the document.",
        "value": false
      },
      {
        "answer": "The DOM is a hash table, where each node is an object representing a part of the document.",
        "value": false
      },
      {
        "answer": "The DOM is a tuple, where each node is an object representing a part of the document.",
        "value": false
      }
    ]
  },
  {
    "question": "What are the only two operations in a Queue?",
    "category": "HTML",
    "answers": [
      {
        "answer": "Enqueue and Dequeue",
        "value": true
      },
      {
        "answer": "Push and Pop",
        "value": false
      },
      {
        "answer": "Last In First Out Lifo",
        "value": false
      },
      { "answer": "First in First Out FIFO", "value": false }
    ]
  },
  {
    "question": "Describe the Stack data structure?",
    "category": "HTML",
    "answers": [
      {
        "answer": "Stack is LIFO, (Last In, First Out). Push adds to the top. Pop removes them.",
        "value": true
      },
      {
        "answer": "Queue is FIFO, (First In, FIrst Out). Only two operations, Enqueue and Dequeue.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is NOT true about call() and apply()",
    "category": "HTML",
    "answers": [
      {
        "answer": "Nodes have event handlers attached to them, which handle inputs (like clicks) which can alter the DOM. ",
        "value": true
      },
      {
        "answer": "Methods like call(), and apply() can refer this to any object.",
        "value": false
      },
      {
        "answer": "Useful mnemonic is “A for array, and C for comma.”",
        "value": false
      },
      {
        "answer": "Apply lets you invoke the function with arguments as an array, Call requires the parameters to be listed explicitly.",
        "value": false
      }
    ]
  },
  {
    "question": "What is a “service” Worker? When would you use one?",
    "category": "HTML",
    "answers": [
      {
        "answer": "All of these!",
        "value": true
      },
      {
        "answer": "1. Intercepting network requests",
        "value": false
      },
      {
        "answer": "2. Caching or retrieving resources from cache.",
        "value": false
      },
      {
        "answer": "Delivering push messages",
        "value": false
      }
    ]
  },
  {
    "question": "What is NOT true about Hoisting?",
    "category": "HTML",
    "answers": [
      {
        "answer": "Functions declared with ES6 variable names like let and const get hoisted to the top.",
        "value": true
      },
      {
        "answer": "Variable declarations are moved the top.",
        "value": false
      },
      {
        "answer": "To call a variable function, you must call it after, whereas a traditional es5 function can be called from anywhere.",
        "value": false
      },
      {
        "answer": "Declared variables ie Var this = “that”, are hoisted to the top. If we try and console.log(this) at the top, we will get undefined.",
        "value": false
      }
    ]
  },
  {
    "question": "The difference between synchronous and asynchronous code?",
    "category": "CSS",
    "answers": [
      {
        "answer": "Async and Sync code also executes top to bottom, however, when we encounter async code, will execute separately. You will have multiple different threads. More challenging as code can execute in any order, and you have to account for that.",
        "value": true
      },
      {
        "answer": "Sync code will start at the top of the file, and execute downwards through the file. Always execute top to bottom. Async code does not.",
        "value": false
      },
      {
        "answer": "Promises are not an example of async await.",
        "value": false
      },
      {
        "answer": "Sync code will bottom of the top of the file, and execute downwards through the file. Always execute bottom to top. Opposite for aync.",
        "value": false
      }
    ]
  },
  {
    "question": "Which choice will NOT cause a React component to rerender?",
    "category": "CSS",
    "answers": [
      { "answer": "one of the components siblings rerenders.", "value": true },
      {
        "answer": "The value of one of the component's props changes.",
        "value": false
      },
      {
        "answer": "if the component calls 'this.forceUpdate()'",
        "value": false
      },
      { "answer": "The component calls 'this.setState(..)'", "value": false }
    ]
  },
  {
    "question": "What do you use for Lazy.loading?",
    "category": "CSS",
    "answers": [
      {
        "answer": "React.lazy",
        "value": true
      },
      { "answer": "Lazy.React", "value": false },
      { "answer": "this.setState()", "value": false },
      {
        "answer": "React.memo",
        "value": false
      }
    ]
  },
  {
    "question": "What do Error Boundaries in React NOT do?",
    "category": "CSS",
    "answers": [
      {
        "answer": "Catch JavaScript errors outside of the child component tree.",
        "value": true
      },
      {
        "answer": "Error boundaries are React components that catch JavaScript errors anywhere in their child component tree.",
        "value": false
      },
      { "answer": "Logs the errors found.", "value": false },
      {
        "answer": "display a fallback UI instead of the component tree that crashed.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following does NOT fall under React's declarative style?",
    "category": "CSS",
    "answers": [
      {
        "answer": "Explicitly describes the actions a program should take, and how it should take those actions.",
        "value": true
      },
      {
        "answer": "Describes what a program should accomplish (or what the end result should be.",
        "value": false
      },
      {
        "answer": "Leaves the determination of how to get to the end result up to the program.",
        "value": false
      },
      {
        "answer": "Allows us to focus on what our React application should look like — as opposed to being concerned with manually updating DOM, adding and removing classes, and so on.",
        "value": false
      }
    ]
  },
  {
    "question": "What does DangerouslySetInnerHTML replace from vanilla js?",
    "category": "CSS",
    "answers": [
      { "answer": "innerHTML.", "value": true },
      { "answer": "innerText", "value": false },
      { "answer": "document.write", "value": false },
      { "answer": "document.getElementById", "value": false }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  },
  {
    "question": "Which of the following is true about the useMemo hook?",
    "category": "CSS",
    "answers": [
      {
        "answer": "You may rely on useMemo as a performance optimization, not as a semantic guarantee.",
        "value": true
      },
      {
        "answer": "You may rely on useMemo as a semantic guarantee, not as a performance optimization.",
        "value": false
      },
      {
        "answer": "returns a mutable ref object whose .current property is initialized to the passed argument (initialValue).",
        "value": false
      },
      {
        "answer": "It has demonstrated great potential for brining about world peace.",
        "value": false
      }
    ]
  }
]
